/**
*
*Copyright 2010 Microsoft Corp
*
*Licensed under the Apache License, Version 2.0 (the "License");
*you may not use this file except in compliance with the License.
*You may obtain a copy of the License at
*
*http://www.apache.org/licenses/LICENSE-2.0
*
*Unless required by applicable law or agreed to in writing, software
*distributed under the License is distributed on an "AS IS" BASIS,
*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*See the License for the specific language governing permissions and
*limitations under the License.
*/
/**
* This code was generated by the tool 'odatagen'.
* Runtime Version:1.0
*
* Changes to this file may cause incorrect behavior and will be lost if
* the code is regenerated.
*/
#import "Entities.h"
/**
 * @interface:Badge
 * @key:Id
 */
@implementation MetaModel_Badge
	@synthesize m_Id;
	@synthesize m_UserId;
	@synthesize m_Name;
	@synthesize m_Date;
	@synthesize m_User;

/**
 *Method to create an instance of Badge
 */
+ (id) CreateBadgeWithid:(NSNumber *)aId
{
	MetaModel_Badge *aBadge = [[MetaModel_Badge alloc]init];
	
	aBadge.m_Id = aId;

	return aBadge;
}
/**
 * Initialising object for Badge
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"User" forKey:@"User"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_UserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"50" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Name"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Date"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"BadgeUser" forKey:@"User"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Badge"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_Badge *)getDeepCopy
{
	MetaModel_Badge *obj=[[MetaModel_Badge alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setUserId:[self getUserId]];
	[obj setName:[self getName]];
	[obj setDate:[self getDate]];
	[obj setUser:[self getUser]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_UserId release];
	m_UserId = nil;
	[m_Name release];
	m_Name = nil;
	[m_Date release];
	m_Date = nil;
	
	[m_User release];
	m_User = nil;
	[super dealloc];
}

@end


/**
 * @interface:Badge
 */
@implementation MetaModel_DeletedBadge
/**
 * Initialising object for Badge
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:Comment
 * @key:Id
 */
@implementation MetaModel_Comment
	@synthesize m_Id;
	@synthesize m_PostId;
	@synthesize m_Score;
	@synthesize m_Text;
	@synthesize m_CreationDate;
	@synthesize m_UserId;
	@synthesize m_Post;
	@synthesize m_User;

/**
 *Method to create an instance of Comment
 */
+ (id) CreateCommentWithid:(NSNumber *)aId
{
	MetaModel_Comment *aComment = [[MetaModel_Comment alloc]init];
	
	aComment.m_Id = aId;

	return aComment;
}
/**
 * Initialising object for Comment
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Post" forKey:@"Post"];
		[m_OData_entityMap setObject:@"User" forKey:@"User"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PostId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Score"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Text"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CreationDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_UserId"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"CommentPost" forKey:@"Post"];
		[m_OData_entityFKRelation setObject:@"CommentUser" forKey:@"User"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Comment"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_Comment *)getDeepCopy
{
	MetaModel_Comment *obj=[[MetaModel_Comment alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setPostId:[self getPostId]];
	[obj setScore:[self getScore]];
	[obj setText:[self getText]];
	[obj setCreationDate:[self getCreationDate]];
	[obj setUserId:[self getUserId]];
	[obj setPost:[self getPost]];
	[obj setUser:[self getUser]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_PostId release];
	m_PostId = nil;
	[m_Score release];
	m_Score = nil;
	[m_Text release];
	m_Text = nil;
	[m_CreationDate release];
	m_CreationDate = nil;
	[m_UserId release];
	m_UserId = nil;
	
	[m_Post release];
	m_Post = nil;
	[m_User release];
	m_User = nil;
	[super dealloc];
}

@end


/**
 * @interface:Comment
 */
@implementation MetaModel_DeletedComment
/**
 * Initialising object for Comment
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:Post
 * @key:Id
 */
@implementation MetaModel_Post
	@synthesize m_Id;
	@synthesize m_PostTypeId;
	@synthesize m_AcceptedAnswerId;
	@synthesize m_CreationDate;
	@synthesize m_Score;
	@synthesize m_ViewCount;
	@synthesize m_Body;
	@synthesize m_OwnerUserId;
	@synthesize m_LastEditorUserId;
	@synthesize m_LastEditDate;
	@synthesize m_LastActivityDate;
	@synthesize m_Title;
	@synthesize m_Tags;
	@synthesize m_AnswerCount;
	@synthesize m_CommentCount;
	@synthesize m_FavoriteCount;
	@synthesize m_ClosedDate;
	@synthesize m_ParentId;
	@synthesize m_CommunityOwnedDate;
	@synthesize m_Comments;
	@synthesize m_Children;
	@synthesize m_Parent;

/**
 *Method to create an instance of Post
 */
+ (id) CreatePostWithid:(NSNumber *)aId
{
	MetaModel_Post *aPost = [[MetaModel_Post alloc]init];
	
	aPost.m_Id = aId;

	return aPost;
}
/**
 * Initialising object for Post
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Comment" forKey:@"Comments"];
		[m_OData_entityMap setObject:@"Post1" forKey:@"Children"];
		[m_OData_entityMap setObject:@"Post" forKey:@"Parent"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Byte" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PostTypeId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AcceptedAnswerId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CreationDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Score"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ViewCount"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Body"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_OwnerUserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_LastEditorUserId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_LastEditDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_LastActivityDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"250" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Title"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"150" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Tags"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AnswerCount"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CommentCount"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_FavoriteCount"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ClosedDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_ParentId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CommunityOwnedDate"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"CommentPost" forKey:@"Comment"];
		[m_OData_entityFKRelation setObject:@"PostPost" forKey:@"Post1"];
		[m_OData_entityFKRelation setObject:@"PostPost" forKey:@"Post"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Post"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_Post *)getDeepCopy
{
	MetaModel_Post *obj=[[MetaModel_Post alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setPostTypeId:[self getPostTypeId]];
	[obj setAcceptedAnswerId:[self getAcceptedAnswerId]];
	[obj setCreationDate:[self getCreationDate]];
	[obj setScore:[self getScore]];
	[obj setViewCount:[self getViewCount]];
	[obj setBody:[self getBody]];
	[obj setOwnerUserId:[self getOwnerUserId]];
	[obj setLastEditorUserId:[self getLastEditorUserId]];
	[obj setLastEditDate:[self getLastEditDate]];
	[obj setLastActivityDate:[self getLastActivityDate]];
	[obj setTitle:[self getTitle]];
	[obj setTags:[self getTags]];
	[obj setAnswerCount:[self getAnswerCount]];
	[obj setCommentCount:[self getCommentCount]];
	[obj setFavoriteCount:[self getFavoriteCount]];
	[obj setClosedDate:[self getClosedDate]];
	[obj setParentId:[self getParentId]];
	[obj setCommunityOwnedDate:[self getCommunityOwnedDate]];
	[obj setComments:[self getComments]];
	[obj setChildren:[self getChildren]];
	[obj setParent:[self getParent]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_AcceptedAnswerId release];
	m_AcceptedAnswerId = nil;
	[m_CreationDate release];
	m_CreationDate = nil;
	[m_Score release];
	m_Score = nil;
	[m_ViewCount release];
	m_ViewCount = nil;
	[m_Body release];
	m_Body = nil;
	[m_OwnerUserId release];
	m_OwnerUserId = nil;
	[m_LastEditorUserId release];
	m_LastEditorUserId = nil;
	[m_LastEditDate release];
	m_LastEditDate = nil;
	[m_LastActivityDate release];
	m_LastActivityDate = nil;
	[m_Title release];
	m_Title = nil;
	[m_Tags release];
	m_Tags = nil;
	[m_AnswerCount release];
	m_AnswerCount = nil;
	[m_CommentCount release];
	m_CommentCount = nil;
	[m_FavoriteCount release];
	m_FavoriteCount = nil;
	[m_ClosedDate release];
	m_ClosedDate = nil;
	[m_ParentId release];
	m_ParentId = nil;
	[m_CommunityOwnedDate release];
	m_CommunityOwnedDate = nil;
	
	[m_Comments release];
	m_Comments = nil;
	[m_Children release];
	m_Children = nil;
	[m_Parent release];
	m_Parent = nil;
	[super dealloc];
}

@end


/**
 * @interface:Post
 */
@implementation MetaModel_DeletedPost
/**
 * Initialising object for Post
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:Tag
 * @key:Id
 */
@implementation MetaModel_Tag
	@synthesize m_Id;
	@synthesize m_TagName;

/**
 *Method to create an instance of Tag
 */
+ (id) CreateTagWithid:(NSNumber *)aId
{
	MetaModel_Tag *aTag = [[MetaModel_Tag alloc]init];
	
	aTag.m_Id = aId;

	return aTag;
}
/**
 * Initialising object for Tag
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"255" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_TagName"];
		[obj release];
		

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Tag"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_Tag *)getDeepCopy
{
	MetaModel_Tag *obj=[[MetaModel_Tag alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setTagName:[self getTagName]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_TagName release];
	m_TagName = nil;
	
	[super dealloc];
}

@end


/**
 * @interface:Tag
 */
@implementation MetaModel_DeletedTag
/**
 * Initialising object for Tag
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:User
 * @key:Id
 */
@implementation MetaModel_User
	@synthesize m_Id;
	@synthesize m_Reputation;
	@synthesize m_EmailHash;
	@synthesize m_CreationDate;
	@synthesize m_DisplayName;
	@synthesize m_LastAccessDate;
	@synthesize m_WebsiteUrl;
	@synthesize m_Location;
	@synthesize m_Age;
	@synthesize m_AboutMe;
	@synthesize m_Views;
	@synthesize m_UpVotes;
	@synthesize m_DownVotes;
	@synthesize m_Badges;
	@synthesize m_Comments;

/**
 *Method to create an instance of User
 */
+ (id) CreateUserWithid:(NSNumber *)aId
{
	MetaModel_User *aUser = [[MetaModel_User alloc]init];
	
	aUser.m_Id = aId;

	return aUser;
}
/**
 * Initialising object for User
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Badge" forKey:@"Badges"];
		[m_OData_entityMap setObject:@"Comment" forKey:@"Comments"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Reputation"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"40" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_EmailHash"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CreationDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"40" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_DisplayName"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_LastAccessDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"200" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_WebsiteUrl"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"100" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Location"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Age"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"Max" MinLength:@"" FixedLength:NO Nullable:YES Unicode:YES ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_AboutMe"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Views"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_UpVotes"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_DownVotes"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"BadgeUser" forKey:@"Badge"];
		[m_OData_entityFKRelation setObject:@"CommentUser" forKey:@"Comment"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"User"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_User *)getDeepCopy
{
	MetaModel_User *obj=[[MetaModel_User alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setReputation:[self getReputation]];
	[obj setEmailHash:[self getEmailHash]];
	[obj setCreationDate:[self getCreationDate]];
	[obj setDisplayName:[self getDisplayName]];
	[obj setLastAccessDate:[self getLastAccessDate]];
	[obj setWebsiteUrl:[self getWebsiteUrl]];
	[obj setLocation:[self getLocation]];
	[obj setAge:[self getAge]];
	[obj setAboutMe:[self getAboutMe]];
	[obj setViews:[self getViews]];
	[obj setUpVotes:[self getUpVotes]];
	[obj setDownVotes:[self getDownVotes]];
	[obj setBadges:[self getBadges]];
	[obj setComments:[self getComments]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_Reputation release];
	m_Reputation = nil;
	[m_EmailHash release];
	m_EmailHash = nil;
	[m_CreationDate release];
	m_CreationDate = nil;
	[m_DisplayName release];
	m_DisplayName = nil;
	[m_LastAccessDate release];
	m_LastAccessDate = nil;
	[m_WebsiteUrl release];
	m_WebsiteUrl = nil;
	[m_Location release];
	m_Location = nil;
	[m_Age release];
	m_Age = nil;
	[m_AboutMe release];
	m_AboutMe = nil;
	[m_Views release];
	m_Views = nil;
	[m_UpVotes release];
	m_UpVotes = nil;
	[m_DownVotes release];
	m_DownVotes = nil;
	
	[m_Badges release];
	m_Badges = nil;
	[m_Comments release];
	m_Comments = nil;
	[super dealloc];
}

@end


/**
 * @interface:User
 */
@implementation MetaModel_DeletedUser
/**
 * Initialising object for User
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:Vote
 * @key:Id
 */
@implementation MetaModel_Vote
	@synthesize m_Id;
	@synthesize m_PostId;
	@synthesize m_VoteTypeId;
	@synthesize m_CreationDate;
	@synthesize m_BountyAmount;
	@synthesize m_UserId;
	@synthesize m_VoteType;

/**
 *Method to create an instance of Vote
 */
+ (id) CreateVoteWithid:(NSNumber *)aId
{
	MetaModel_Vote *aVote = [[MetaModel_Vote alloc]init];
	
	aVote.m_Id = aId;

	return aVote;
}
/**
 * Initialising object for Vote
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"VoteType" forKey:@"VoteType"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_PostId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_VoteTypeId"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.DateTime" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_CreationDate"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_BountyAmount"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_UserId"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"VoteVoteType" forKey:@"VoteType"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"Vote"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_Vote *)getDeepCopy
{
	MetaModel_Vote *obj=[[MetaModel_Vote alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setPostId:[self getPostId]];
	[obj setVoteTypeId:[self getVoteTypeId]];
	[obj setCreationDate:[self getCreationDate]];
	[obj setBountyAmount:[self getBountyAmount]];
	[obj setUserId:[self getUserId]];
	[obj setVoteType:[self getVoteType]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_PostId release];
	m_PostId = nil;
	[m_VoteTypeId release];
	m_VoteTypeId = nil;
	[m_CreationDate release];
	m_CreationDate = nil;
	[m_BountyAmount release];
	m_BountyAmount = nil;
	[m_UserId release];
	m_UserId = nil;
	
	[m_VoteType release];
	m_VoteType = nil;
	[super dealloc];
}

@end


/**
 * @interface:Vote
 */
@implementation MetaModel_DeletedVote
/**
 * Initialising object for Vote
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end

/**
 * @interface:VoteType
 * @key:Id
 */
@implementation MetaModel_VoteType
	@synthesize m_Id;
	@synthesize m_Name;
	@synthesize m_Votes;

/**
 *Method to create an instance of VoteType
 */
+ (id) CreateVoteTypeWithid:(NSNumber *)aId
{
	MetaModel_VoteType *aVoteType = [[MetaModel_VoteType alloc]init];
	
	aVoteType.m_Id = aId;

	return aVoteType;
}
/**
 * Initialising object for VoteType
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		m_OData_hasStream.booleanvalue=NO;
		[m_OData_entityMap setObject:@"Vote" forKey:@"Votes"];
		mProperties *obj;
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.Int32" MaxLength:@"" MinLength:@"" FixedLength:NO Nullable:NO Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Id"];
		[obj release];
		
		obj=[[mProperties alloc]initWithEdmType:@"Edm.String" MaxLength:@"40" MinLength:@"" FixedLength:NO Nullable:YES Unicode:NO ConcurrencyMode:@"" FC_TargetPath:@"" FC_KeepInContent:YES FC_SourcePath:@"" FC_ContentKind:@"" FC_NsPrefix:@"" FC_NsUri:@""];
		[m_OData_propertiesMap setObject:obj forKey:@"m_Name"];
		[obj release];
		
		[m_OData_entityFKRelation setObject:@"VoteVoteType" forKey:@"Vote"];

		NSMutableArray *anEntityKey=[[NSMutableArray alloc]init];
[anEntityKey addObject:@"Id"];
		[m_OData_entityKey setObject:anEntityKey forKey:@"VoteType"];
		[anEntityKey release];
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}
-(MetaModel_VoteType *)getDeepCopy
{
	MetaModel_VoteType *obj=[[MetaModel_VoteType alloc]initWithUri:[self getBaseURI]];
	[obj setId:[self getId]];
	[obj setName:[self getName]];
	[obj setVotes:[self getVotes]];

	return [obj autorelease];
}
- (void) dealloc
{
	[m_Id release];
	m_Id = nil;
	[m_Name release];
	m_Name = nil;
	
	[m_Votes release];
	m_Votes = nil;
	[super dealloc];
}

@end


/**
 * @interface:VoteType
 */
@implementation MetaModel_DeletedVoteType
/**
 * Initialising object for VoteType
 */
- (id) init
{
	self=[self initWithUri:nil];
	return self;
}

- (id) initWithUri:(NSString*)anUri 
{
	if(self=[super initWithUri:anUri])
	{
		[self setBaseURI:anUri];
		
	}
	return self;
}

-(NSMutableArray *)getSyndicateArray
{
	NSMutableArray *syndicateArray=[[NSMutableArray alloc]init];
	
	return [syndicateArray autorelease];
}

- (void) dealloc
{
	
	[super dealloc];
}

@end


 
/**
 * Container interface Entities, Namespace: MetaModel
 */
@implementation Entities 

	@synthesize m_OData_etag;

	@synthesize m_Badges;
	@synthesize m_Comments;
	@synthesize m_Posts;
	@synthesize m_Tags;
	@synthesize m_Users;
	@synthesize m_Votes;
	@synthesize m_VoteTypes;
/**
 * The initializer for Entities accepting service URI
 */
- (id) init
{
	NSString* tmpuri =[[NSString alloc]initWithString:DEFAULT_SERVICE_URL];
	self=[self initWithUri:tmpuri credential:nil];
	[tmpuri release];
	return self;
}

- (id) initWithUri:(NSString*)anUri credential:(id)acredential
{
	NSString* tmpuri=nil;
	if([anUri length]==0)
	{
	 	tmpuri = DEFAULT_SERVICE_URL;
	}
	else
	{
		tmpuri =[NSString stringWithString:anUri];
	}
	if(![tmpuri hasSuffix:@"/"])
	{
		tmpuri=[tmpuri stringByAppendingString:@"/"];
	}

	if(self=[super initWithUri:tmpuri credentials:acredential dataServiceVersion:DataServiceVersion])
	{
		[super setServiceNamespace:@"MetaModel"];

		NSMutableArray* tempEntities=[[NSMutableArray alloc]init];
		
		[tempEntities addObject:@"Badges"];
		[tempEntities addObject:@"Comments"];
		[tempEntities addObject:@"Posts"];
		[tempEntities addObject:@"Tags"];
		[tempEntities addObject:@"Users"];
		[tempEntities addObject:@"Votes"];
		[tempEntities addObject:@"VoteTypes"];

		if([tempEntities count] > 0 )
		{
			[super setEntitiesWithArray:tempEntities];
		}
		[tempEntities release];

		NSMutableArray* tempEntitiySetKey=[[NSMutableArray alloc]init];
		
		[tempEntitiySetKey addObject:@"badges"];
		[tempEntitiySetKey addObject:@"comments"];
		[tempEntitiySetKey addObject:@"posts"];
		[tempEntitiySetKey addObject:@"tags"];
		[tempEntitiySetKey addObject:@"users"];
		[tempEntitiySetKey addObject:@"votes"];
		[tempEntitiySetKey addObject:@"votetypes"];

		NSMutableArray* tempEntitiyTypeobj=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeobj addObject:@"Badge"];
		[tempEntitiyTypeobj addObject:@"Comment"];
		[tempEntitiyTypeobj addObject:@"Post"];
		[tempEntitiyTypeobj addObject:@"Tag"];
		[tempEntitiyTypeobj addObject:@"User"];
		[tempEntitiyTypeobj addObject:@"Vote"];
		[tempEntitiyTypeobj addObject:@"VoteType"];

		if( ( [tempEntitiySetKey count] > 0 ) && ( [tempEntitiyTypeobj count] > 0 ) )
		{
			[super setEntitySet2TypeWithObject:tempEntitiyTypeobj forKey:tempEntitiySetKey];

		}

		[tempEntitiySetKey release];
		[ tempEntitiyTypeobj release];

		NSMutableArray* tempEntitiyTypeKey=[[NSMutableArray alloc]init];
		
		[tempEntitiyTypeKey addObject:@"badge"];
		[tempEntitiyTypeKey addObject:@"comment"];
		[tempEntitiyTypeKey addObject:@"post"];
		[tempEntitiyTypeKey addObject:@"tag"];
		[tempEntitiyTypeKey addObject:@"user"];
		[tempEntitiyTypeKey addObject:@"vote"];
		[tempEntitiyTypeKey addObject:@"votetype"];
		NSMutableArray* tempEntitySetObj=[[NSMutableArray alloc]init];
		
		[tempEntitySetObj addObject:@"Badges"];
		[tempEntitySetObj addObject:@"Comments"];
		[tempEntitySetObj addObject:@"Posts"];
		[tempEntitySetObj addObject:@"Tags"];
		[tempEntitySetObj addObject:@"Users"];
		[tempEntitySetObj addObject:@"Votes"];
		[tempEntitySetObj addObject:@"VoteTypes"];

		if( ( [tempEntitiyTypeKey count] > 0 ) && ( [tempEntitySetObj count] > 0 ) )
		{
			[super setEntityType2SetWithObject:tempEntitySetObj forKey:tempEntitiyTypeKey];

		}
    	[tempEntitiyTypeKey release];
		[tempEntitySetObj release];

		NSMutableArray* foreignKeys=[[NSMutableArray alloc]init];		
		[foreignKeys addObject:@"BadgeUser"];
		[foreignKeys addObject:@"CommentPost"];
		[foreignKeys addObject:@"CommentUser"];
		[foreignKeys addObject:@"VoteVoteType"];
		[foreignKeys addObject:@"PostPost"];

		NSMutableArray *arrOfDictionaries=[[NSMutableArray alloc]initWithCapacity:[foreignKeys count]];

		NSMutableArray *arr;
 
		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Badge",@"EndRole",@"Badge",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"User",@"EndRole",@"User",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Comment",@"EndRole",@"Comment",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Post",@"EndRole",@"Post",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Comment",@"EndRole",@"Comment",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"User",@"EndRole",@"User",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Vote",@"EndRole",@"Vote",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"VoteType",@"EndRole",@"VoteType",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];


		arr=[[NSMutableArray alloc]init];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Post",@"EndRole",@"Post",@"Type",@"0..1",@"Multiplicity",nil] autorelease]];
		[arr addObject:[[[NSDictionary alloc]initWithObjectsAndKeys:@"Post1",@"EndRole",@"Post",@"Type",@"*",@"Multiplicity",nil] autorelease]];
		[arrOfDictionaries addObject:arr];
		[arr release];

		if( ( [foreignKeys count] > 0 ) && ( [arrOfDictionaries count] > 0 ) )
		{
			[super setAssociationforObjects:arrOfDictionaries forKeys:foreignKeys];
		}
		[foreignKeys release];
		[arrOfDictionaries release];

		m_Badges = [[DataServiceQuery alloc]initWithUri:@"Badges" objectContext: self];
		m_Comments = [[DataServiceQuery alloc]initWithUri:@"Comments" objectContext: self];
		m_Posts = [[DataServiceQuery alloc]initWithUri:@"Posts" objectContext: self];
		m_Tags = [[DataServiceQuery alloc]initWithUri:@"Tags" objectContext: self];
		m_Users = [[DataServiceQuery alloc]initWithUri:@"Users" objectContext: self];
		m_Votes = [[DataServiceQuery alloc]initWithUri:@"Votes" objectContext: self];
		m_VoteTypes = [[DataServiceQuery alloc]initWithUri:@"VoteTypes" objectContext: self];
		
	}
	return self;
}


/**
 * Method returns DataServiceQuery reference for
 * the entityset Badges
 */
- (id) badges
{
	[self.m_Badges clearAllOptions];
	return self.m_Badges;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Comments
 */
- (id) comments
{
	[self.m_Comments clearAllOptions];
	return self.m_Comments;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Posts
 */
- (id) posts
{
	[self.m_Posts clearAllOptions];
	return self.m_Posts;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Tags
 */
- (id) tags
{
	[self.m_Tags clearAllOptions];
	return self.m_Tags;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Users
 */
- (id) users
{
	[self.m_Users clearAllOptions];
	return self.m_Users;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset Votes
 */
- (id) votes
{
	[self.m_Votes clearAllOptions];
	return self.m_Votes;
}

/**
 * Method returns DataServiceQuery reference for
 * the entityset VoteTypes
 */
- (id) votetypes
{
	[self.m_VoteTypes clearAllOptions];
	return self.m_VoteTypes;
}

/**
 * Methods for adding object to the entityset/collection
 */

- (void) addToBadges:(id)anObject
{
	[super addObject:@"Badges" object:anObject];
}

- (void) addToComments:(id)anObject
{
	[super addObject:@"Comments" object:anObject];
}

- (void) addToPosts:(id)anObject
{
	[super addObject:@"Posts" object:anObject];
}

- (void) addToTags:(id)anObject
{
	[super addObject:@"Tags" object:anObject];
}

- (void) addToUsers:(id)anObject
{
	[super addObject:@"Users" object:anObject];
}

- (void) addToVotes:(id)anObject
{
	[super addObject:@"Votes" object:anObject];
}

- (void) addToVoteTypes:(id)anObject
{
	[super addObject:@"VoteTypes" object:anObject];
}

- (void) dealloc
{
	[ m_OData_etag release];
	m_OData_etag = nil;
	
	[m_Badges release];
	m_Badges = nil;
	[m_Comments release];
	m_Comments = nil;
	[m_Posts release];
	m_Posts = nil;
	[m_Tags release];
	m_Tags = nil;
	[m_Users release];
	m_Users = nil;
	[m_Votes release];
	m_Votes = nil;
	[m_VoteTypes release];
	m_VoteTypes = nil;

	[super dealloc];
}

@end
